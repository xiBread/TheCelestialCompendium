---
import { Menu, Moon, Sun, Search as SearchIcon } from "lucide-astro";
import TopLevelNav from "./TopLevelNav.astro";

interface Props {
	fullscreen?: boolean;
}

const { fullscreen } = Astro.props;
---

<header
	class="fixed inset-x-0 top-0 flex h-14 items-center justify-between gap-12 border-b border-slate-900/7.5 px-4 sm:px-6 lg:px-8 dark:border-white/7.5"
	x-data
	:class={`$store.mobileNav.open ? 'z-50 bg-white dark:bg-slate-950' : 'z-10 bg-white/[var(--bg-opacity-light)] backdrop-blur-sm transition ${fullscreen ? "" : "lg:left-72"} dark:bg-slate-950/[var(--bg-opacity-dark)] dark:backdrop-blur'`}
>
	{
		fullscreen && (
			<a class="hidden items-center lg:flex" href="/" aria-label="Home">
				<img class="mr-3 size-6" src="/logo.svg" />

				<div class="font-bold text-slate-900 sm:text-lg dark:text-white">
					The Celestial Compendium
				</div>
			</a>
		)
	}

	<div class="flex items-center gap-5 lg:hidden">
		<button
			class:list={[
				"flex items-center justify-center rounded-md p-1.5 transition hover:bg-slate-900/5 dark:hover:bg-white/10",
				fullscreen ? "md:hidden" : "lg:hidden",
			]}
			type="button"
			aria-label="Toggle navigation"
			@click="$store.mobileNav.open = !$store.mobileNav.open"
		>
			<Menu class="size-4 text-slate-900 dark:text-white" />
		</button>

		<a class="flex items-center" href="/" aria-label="Home">
			<img class="mr-3 size-6" src="/logo.svg" />

			<div class="font-bold text-slate-900 sm:text-lg dark:text-white">
				The Celestial Compendium
			</div>
		</a>
	</div>

	<div class="flex w-full items-center justify-end gap-5">
		<nav class="hidden md:block">
			<ul class="flex items-center gap-8" role="list">
				<TopLevelNav linkClass="leading-5" />
			</ul>
		</nav>

		<div
			class="hidden md:block md:h-5 md:w-px md:bg-slate-900/10 md:dark:bg-white/15"
			role="separator"
		>
		</div>

		<div class="flex gap-4">
			<button
				class="search flex items-center justify-center rounded-md p-1.5 transition hover:bg-slate-900/5 dark:hover:bg-white/10"
				title="Search entries (/)"
				type="button"
				aria-label="Search entries"
				x-data
				x-on:click="$store.search.open = true"
			>
				<SearchIcon class="size-4 text-slate-900 dark:text-white" />
			</button>

			<button
				id="theme-toggle"
				title="Toggle theme"
				type="button"
				class="flex items-center justify-center rounded-md p-1.5 transition hover:bg-slate-900/5 dark:hover:bg-white/10"
				aria-label="Toggle theme"
			>
				<Sun class="size-4 text-slate-900 dark:hidden" />
				<Moon class="hidden size-4 text-white dark:block" />
			</button>
		</div>
	</div>
</header>

<script>
	const themeToggle = document.getElementById("theme-toggle");
	const html = document.documentElement;

	themeToggle?.addEventListener("click", () => {
		const theme = html.getAttribute("data-theme") ?? "dark";
		const detail = theme === "dark" ? "light" : "dark";

		document.dispatchEvent(new CustomEvent("set-theme", { detail }));
	});

	addEventListener("scroll", () => {
		let opacityLight = 0.5 + (scrollY / 72) * (0.9 - 0.5);
		opacityLight = Math.max(0.5, Math.min(0.9, opacityLight));

		let opacityDark = 0.2 + (scrollY / 72) * (0.8 - 0.2);
		opacityDark = Math.max(0.2, Math.min(0.8, opacityDark));

		html.style.setProperty("--bg-opacity-light", `${opacityLight}`);
		html.style.setProperty("--bg-opacity-dark", `${opacityDark}`);
	});
</script>
