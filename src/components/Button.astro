---
import type { HTMLAttributes } from "astro/types";
import { MoveRight } from "lucide-astro";
import { tv, type VariantProps } from "tailwind-variants";

export type Props = (
	| (HTMLAttributes<"button"> & { href?: never })
	| (HTMLAttributes<"a"> & { type?: never })
) & {
	variant?: VariantProps<typeof button>["variant"];
	arrow?: "left" | "right";
};

export const button = tv({
	base: "inline-flex gap-0.5 justify-center items-center overflow-hidden text-sm font-medium transition",
	variants: {
		variant: {
			primary:
				"rounded-full bg-slate-900 py-1 px-3 text-white hover:bg-slate-700 dark:bg-indigo-400/10 dark:text-indigo-400 dark:ring-1 dark:ring-inset dark:ring-indigo-400/20 dark:hover:bg-indigo-400/10 dark:hover:text-indigo-300 dark:hover:ring-indigo-300",
			secondary:
				"rounded-full bg-slate-100 py-1 px-3 text-slate-900 hover:bg-slate-200 dark:bg-slate-800/40 dark:text-slate-400 dark:ring-1 dark:ring-inset dark:ring-slate-800 dark:hover:bg-slate-800 dark:hover:text-slate-300",
			filled: "rounded-full bg-slate-900 py-1 px-3 text-white hover:bg-slate-700 dark:bg-indigo-500 dark:text-white dark:hover:bg-indigo-400",
			outline:
				"rounded-full py-1 px-3 text-slate-700 ring-1 ring-inset ring-slate-900/10 hover:bg-slate-900/2.5 hover:text-slate-900 dark:text-slate-400 dark:ring-white/10 dark:hover:bg-white/5 dark:hover:text-white",
			text: "text-indigo-500 hover:text-indigo-600 dark:text-indigo-400 dark:hover:text-indigo-500",
		},
	},
	defaultVariants: {
		variant: "primary",
	},
});

const { arrow, variant, class: className, ...props } = Astro.props;

const arrowClass = [
	"mt-0.5 size-4",
	variant === "text" && "relative top-px",
	arrow === "left" && "mr-1 rotate-180",
	arrow === "right" && "ml-1",
];
---

{
	// TODO: find a way to deduplicate this
	typeof props.href === "undefined" ? (
		<button class:list={[button({ variant }), className]} {...props}>
			{arrow === "left" && <MoveRight class:list={arrowClass} />}
			<slot />
			{arrow === "right" && <MoveRight class:list={arrowClass} />}
		</button>
	) : (
		<a class={className} {...props}>
			{arrow === "left" && <MoveRight class:list={arrowClass} />}
			<slot />
			{arrow === "right" && <MoveRight class:list={arrowClass} />}
		</a>
	)
}
