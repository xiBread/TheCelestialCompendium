---
import type { MixedEntry } from "../content/config";
import { remToPx } from "../lib/util";
import TopLevelNav from "./TopLevelNav.astro";

interface Props {
	class?: string;
	entries: MixedEntry[];
}

const { pathname } = Astro.url;

const groups = Astro.props.entries
	.filter((entry) => !entry.data.meta?.index)
	.sort((a, b) => (a.data.meta?.order ?? 0) - (b.data.meta?.order ?? 0))
	.reduce<Record<string, MixedEntry[]>>((all, entry) => {
		const section = entry.slug.split("/")[0];
		(all[section] ??= []).push(entry);

		return all;
	}, {});
---

<nav class={Astro.props.class}>
	<ul role="list">
		<TopLevelNav class="md:hidden" linkClass="block py-1" />

		{
			Object.entries(groups).map(([section, entries], i) => {
				const sectionHref = `/${entries[0].collection}/${section}`;
				const activeIndex = entries.findIndex((entry) => `/${entry.slug}` === pathname);

				return (
					<li class:list={["relative mt-6", i === 0 && "md:mt-0"]}>
						<h2
							class:list={[
								"text-sm font-semibold capitalize",
								sectionHref === pathname
									? "text-indigo-500 dark:text-indigo-400"
									: "text-slate-900 dark:text-white",
							]}
						>
							<a
								class="decoration-indigo-500 underline-offset-2 hover:underline"
								href={sectionHref}
							>
								{section}
							</a>
						</h2>

						<div class="relative mt-2 pl-2">
							{activeIndex >= 0 && (
								<div
									class="absolute inset-x-0 top-0 rounded-lg bg-slate-800/3.5 dark:bg-white/3.5"
									style={{
										top: `${activeIndex * remToPx(2)}px`,
										height: `${remToPx(2)}px`,
									}}
								/>
							)}

							<div class="absolute inset-y-0 left-2 w-px bg-slate-900/10 dark:bg-white/10" />

							{activeIndex >= 0 && (
								<div
									class="absolute left-2 h-6 w-px bg-indigo-500"
									style={{ top: `${remToPx(0.25) + activeIndex * remToPx(2)}px` }}
								/>
							)}

							<ul role="list">
								{entries.map((entry) => {
									const href = `/${entry.collection}/${entry.slug}`;
									const active = href === pathname;

									return (
										<li class="relative">
											<a
												class:list={[
													"flex justify-between gap-2 py-1 pl-4 pr-3 text-sm transition",
													active
														? "font-medium text-slate-900 dark:text-white"
														: "text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-white",
												]}
												{href}
												aria-current={active ? "page" : "false"}
											>
												<span class="truncate">
													{entry.data.title ?? entry.data.name}
												</span>
											</a>
										</li>
									);
								})}
							</ul>
						</div>
					</li>
				);
			})
		}
	</ul>
</nav>
