---
import { getEntry } from "astro:content";

async function getHeadings() {
	try {
		const slug = Astro.url.pathname.slice(1);
		const entry = await getEntry("all", slug);

		const mdx = await entry?.render();
		return mdx?.headings.filter((h) => h.depth > 1 && h.depth < 4);
	} catch {}
}

const headings = await getHeadings();
---

{
	headings && (
		<div class="hidden xl:sticky xl:top-10 xl:block xl:h-[calc(100vh-2.5rem)] xl:w-64 xl:flex-none xl:overflow-y-auto xl:border-l xl:border-zinc-900/10 xl:pl-6 xl:pt-8 xl:dark:border-white/10">
			<nav class="mt-2 hidden lg:block">
				<span class="font-semibold">On this page</span>

				<ol class="mt-4">
					{headings.map((heading) => (
						<li class:list={["mt-1", heading.depth === 3 && "ml-6"]}>
							<a class="text-sm" href={`#${heading.slug}`} aria-current="false">
								{heading.text}
							</a>
						</li>
					))}
				</ol>
			</nav>
		</div>
	)
}

<script>
	import { remToPx } from "../lib/util";

	let timeout = NaN;
	let observer: IntersectionObserver | undefined;
	let current = document.querySelector("a[aria-current='true']");

	const anchors = [...document.querySelectorAll("a")];
	const headings = document.querySelectorAll("article [id]");

	function calcRootMargin() {
		const topBar = document.querySelector("header")?.getBoundingClientRect().height || 0;
		//

		const top = topBar + remToPx(2);
		const bottom = top + remToPx(3.5);

		return `-${top}px 0% ${bottom - document.documentElement.clientHeight}px`;
	}

	function getHeading(element: Element | null): HTMLHeadingElement | null {
		if (!element) return null;

		const ref = element;

		while (element) {
			if (element instanceof HTMLHeadingElement) {
				const level = Number(element.tagName[1]);

				if (level > 1 && level < 4) {
					return element;
				}
			}

			element = element.previousElementSibling;

			while (element?.lastElementChild) {
				element = element.lastElementChild;
			}

			const heading = getHeading(element);
			if (heading) return heading;
		}

		return getHeading(ref.parentElement);
	}

	function observe() {
		observer?.disconnect();

		observer = new IntersectionObserver(
			(entries) => {
				for (const entry of entries) {
					if (!entry.isIntersecting) continue;

					const heading = getHeading(entry.target);
					if (!heading) continue;

					const anchor = anchors.find(
						(a) => a.hash === `#${encodeURIComponent(heading.id)}`,
					);

					if (anchor) {
						if (anchor === current) break;

						current?.setAttribute("aria-current", "false");
						anchor.setAttribute("aria-current", "true");

						current = anchor;
						break;
					}
				}
			},
			{ rootMargin: calcRootMargin() },
		);

		headings.forEach((h) => observer!.observe(h));
	}

	observe();

	const onIdle = window.requestIdleCallback || ((fn) => setTimeout(fn, 1));

	addEventListener("resize", () => {
		observer?.disconnect();

		clearTimeout(timeout);
		timeout = setTimeout(() => onIdle(observe), 200);
	});
</script>

<style>
	a[aria-current="false"] {
		@apply text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-white;
	}

	a[aria-current="true"] {
		@apply text-indigo-600 dark:text-indigo-400;
	}
</style>
